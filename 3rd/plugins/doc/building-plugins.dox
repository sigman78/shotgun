/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page building-plugins Downloading and building plugins
@brief Guide how to download and build plugins for the Magnum engine.

@tableofcontents
@m_footernavigation

Plugins provide additional capability for the Magnum engine in terms of
importing and exporting various media file formats. They are not needed for
essential usage, but you might want them sooner or later when you would want to
use an image as a texture or render text on the screen.

@section building-plugins-packages Prepared packages

The easiest way to install Magnum Plugins is to use one of the ready-made
packages for your platform of choice. See @ref building-plugins-manual if you
want to have more control. Cross-compiling is very similar to
@ref building-cross "cross-compiling of Magnum itself".

-   @ref building-plugins-packages-vcpkg
-   @ref building-plugins-packages-arch
-   @ref building-plugins-packages-deb
-   @ref building-plugins-packages-gentoo
-   @ref building-plugins-packages-brew

@subsection building-plugins-packages-vcpkg Vcpkg packages on Windows

Magnum Plugins are available as a [Vcpkg](https://github.com/Microsoft/vcpkg)
package. After setting up Vcpkg like described in the README, you can install
latest stable version of Magnum Plugins with all its dependencies like this:

@code{.bat}
vcpkg install magnum-plugins
@endcode

But often you may want to install the latest Git revision of all Magnum
projects instead:

@code{.bat}
vcpkg install corrade --head
vcpkg install magnum --head
vcpkg install magnum-plugins --head
@endcode

This by default installs a 32-bit dynamic version of the package, you can use
@cb{.bat} vcpkg install magnum-plugins:x64-windows @ce or
@cb{.bat} vcpkg install magnum-plugins:x64-windows-static @ce to install a
64-bit (static) version instead. You can also use the `VCPKG_DEFAULT_TRIPLET`
variable to change the default --- see the
<a href="https://github.com/Microsoft/vcpkg/blob/master/docs/users/triplets.md">Vcpkg triplet documentation</a>
for more information.

Note that just a subset of plugins isinstalled by default. To opt-in or opt-out
of additional features, you can use the following syntax; feature names are
simply names of CMake `WITH_*` options from the @ref building-plugins-features
section but lowercase. See the
<a href="https://github.com/Microsoft/vcpkg/blob/master/docs/specifications/feature-packages.md">feature documentation</a>
for more information.

@code{.bat}
vcpkg install magnum-plugins[assimpimporter,ddsimporter]
@endcode

Packages installed using Vcpkg can be used straight away in Visual Studio ---
all you need to do is to @cpp #include @ce the headers you want, the
buildsystem will do all needed library linking and setup behind the scenes
automatically. <em>(Cool, isn't it?)</em>

@note If Visual Studio doesn't find the packages, check its verbose output, it
    might point to a mismatch of the triplet above or broken Vcpkg integration.

In order to make Magnum projects installed using Vcpkg available to CMake-based
projects, specify the Vcpkg toolchain file on the command line when invoking
CMake in a fresh build directory, for example:

@code{.bat}
mkdir build && cd build
cmake .. -DCMAKE_TOOLCHAIN_FILE=C:/src/vcpkg/scripts/buildsystems/vcpkg.cmake
@endcode

If you want to pass additional flags to CMake, run @cb{.bat} vcpkg edit magnum-plugins @ce
and edit `OPTIONS` in @cmake vcpkg_configure_cmake() @ce.

There are also Vcpkg packages for
@ref building-integration-packages-vcpkg "Magnum Integration" and
@ref building-extras-packages-vcpkg "Magnum Extras".

@subsection building-plugins-packages-arch ArchLinux packages

Package for the latest stable release is maintained in the `community` repo.
Installing is as simple as this:

@code{.sh}
sudo pacman -S magnum-plugins
@endcode

In `package/archlinux/magnum-plugins-git` there is a package for Git
development build. The package is also in AUR as
[magnum-plugins-git](https://aur.archlinux.org/packages/magnum-plugins-git/).
It depends on @ref building-corrade-packages-arch "Corrade" and
@ref building-packages-arch "Magnum" ArchLinux packages.

There are also a few development packages for native builds, cross-compilation
for Emscripten, Android and MinGW or various sanitizer/coverage builds. See the
PKGBUILD files in the `package/archlinux` directory. They allow you to build
and install the package directly from source tree. Example usage:

@code{.sh}
git clone git://github.com/mosra/magnum-plugins && cd magnum-plugins
cd package/archlinux
makepkg -fp PKGBUILD # or any other PKGBUILD file
@endcode

In most cases the development PKGBUILDs also contain a @cb{.sh} check() @ce
function which will run all unit tests before packaging. That might sometimes
fail or take too long, pass `--nocheck` to `makepkg` to skip that.

Once built, install the package using `pacman`:

@code{.sh}
sudo pacman -U magnum-plugins-*.pkg.tar.xz
@endcode

Edit the PKGBUILDs if you want to pass additional flags to CMake or
@ref building-plugins-features "enable / disable additional features".

There are also ArchLinux packages for
@ref building-integration-packages-arch "Magnum Integration",
@ref building-extras-packages-arch "Magnum Extras" and
@ref building-examples-packages-arch "Magnum Examples".

@subsection building-plugins-packages-deb Packages for Debian, Ubuntu and derivatives

Prebuilt packages of the latest stable version for Ubuntu 14.04, 16.04 and
18.04 are available through a PPA. To install packages related to Magnum and
Corrade, you can add the repository and then install the packages with the
following commands:

@code{.sh}
sudo add-apt-repository ppa:chrome/magnum.graphics
sudo apt-get update
sudo apt-get install magnum-plugins magnum-plugins-dev
@endcode

For more information about these packages, please visit
[the PPA page](https://launchpad.net/~chrome/+archive/ubuntu/magnum.graphics).

To build your own package, the `package/debian/` directory contains all files needed for building Debian packages. You need the
@ref building-corrade-packages-deb "Corrade" and
@ref building-packages-deb "Magnum" Debian packages installed and in addition
also the `dpkg-dev` and `debhelper` packages. Building is easy, just change
directory to package root, link or copy the `package/debian` directory there
and run `dpkg-buildpackage`:

@code{.sh}
git clone git://github.com/mosra/magnum-plugins && cd magnum-plugins
ln -s package/debian .
dpkg-buildpackage
@endcode

This will compile binary and development packages, which will then appear in a
parent directory. Install them using `dpkg`:

@code{.sh}
sudo dpkg -i ../magnum-plugins*.deb
@endcode

If you want to pass additional flags to CMake or
@ref building-plugins-features "enable / disable additional features", add them
to `dh_auto_configure` at the bottom of `debian/rules`. Watch out, as
indentation has to be done using tabs, not spaces.

There are also Debian packages for
@ref building-integration-packages-deb "Magnum Integration",
@ref building-extras-packages-deb "Magnum Extras" and
@ref building-examples-packages-deb "Magnum Examples".

@subsection building-plugins-packages-gentoo Gentoo Linux ebuilds

Gentoo Git ebuild is available in the `package/gentoo` directory. Get the
@ref building-corrade-packages-gentoo "Corrade" and
@ref building-packages-gentoo "Magnum" Gentoo packages first and then build and
install Magnum Plugins like this:

@code{.sh}
git clone git://github.com/mosra/magnum-plugins && cd magnum-plugins
cd package/gentoo
sudo ebuild dev-libs/magnum-plugins/magnum-plugins-99999.ebuild manifest clean merge
@endcode

If you want to pass additional flags to CMake or
@ref building-plugins-features "enable / disable additional features", add them
to `mycmakeargs` in the `*.ebuild` file.

There are also Gentoo packages for
@ref building-integration-packages-gentoo "Magnum Integration",
@ref building-extras-packages-gentoo "Magnum Extras" and
@ref building-examples-packages-gentoo "Magnum Examples".

@subsection building-plugins-packages-brew Homebrew formulas for macOS

macOS [Homebrew](https://brew.sh) formulas building the latest Git revision are
in the `package/homebrew` directory. Either use the `*.rb` files directly or
use the tap at https://github.com/mosra/homebrew-magnum. This will install the
latest stable version of Magnum Plugins with all dependencies:

@code{.sh}
brew install mosra/magnum/magnum-plugins
@endcode

But often you may want to install the latest Git revision of all Magnum
projects instead:

@code{.sh}
brew install --HEAD mosra/magnum/corrade
brew install --HEAD mosra/magnum/magnum
brew install --HEAD mosra/magnum/magnum-plugins
@endcode

When installing from the `*.rb` files you need to install the
@ref building-corrade-packages-brew "Corrade"
and @ref building-packages-brew "Magnum" Homebrew packages first. If you want
to pass additional flags to CMake or
@ref building-plugins-features "enable / disable additional features", edit the
`*.rb` file.

There are also Homebrew packages for
@ref building-integration-packages-brew "Magnum Integration",
@ref building-extras-packages-brew "Magnum Extras" and
@ref building-examples-packages-brew "Magnum Examples".

@section building-plugins-manual Manual build

The source is available on GitHub: https://github.com/mosra/magnum-plugins.
Building the plugins is very similar to building Magnum itself. See
@ref building for additonal information about building and running tests,
cross-compiling and platform-specific issues.

@subsection building-plugins-features Enabling or disabling features

Similarly to Magnum, the plugins are build as shared by default. If you are
developing for a platform that doesn't support dynamic library loading or if
you just want to link them statically, enable `BUILD_PLUGINS_STATIC` to build
the plugins as static. If you plan to use the static plugins with shared
libraries later, enable also position-independent code with `BUILD_STATIC_PIC`.
Dynamic plugins are loaded by the manager on request at runtime, potentially
saving memory when the plugin is not needed, static plugins must be linked in
at compile time. Some plugins expose their internal state through separate
libraries, their static build can be controlled using the `BUILD_STATIC`
option.

Static plugins built in the `Debug` configuration (e.g. with `CMAKE_BUILD_TYPE`
set to `Debug`) have a `-d` suffix, *dynamic* plugins in `Debug` configuration
are installed to the `magnum-d` subdirectory, similarly to what is done when
@ref building "building Magnum itself".

By default no plugins are built and you need to select them manually:

-   `WITH_ASSIMPIMPORTER` --- Build the @ref Trade::AssimpImporter "AssimpImporter"
    plugin. Depends on [Assimp](http://assimp.org/).
-   `WITH_COLLADAIMPORTER` --- Build the @ref Trade::ColladaImporter "ColladaImporter"
    plugin. Depends on [Qt4](https://qt.io).
-   `WITH_DDSIMPORTER` --- Build the @ref Trade::DdsImporter "DdsImporter"
    plugin.
-   `WITH_DEVILIMAGEIMPORTER` --- Build the
    @ref Trade::DevIlImageImporter "DevIlImageImporter" plugin. Depends on
    [DevIL](http://openil.sourceforge.net/).
-   `WITH_DRFLACAUDIOIMPORTER` --- Build the
    @ref Audio::DrFlacImporter "DrFlacAudioImporter" plugin.
-   `WITH_DRWAVAUDIOIMPORTER` --- Build the
    @ref Audio::DrWavImporter "DrWavAudioImporter" plugin.
-   `WITH_FREETYPEFONT` --- Build the @ref Text::FreeTypeFont "FreeTypeFont"
    plugin. Depends on [FreeType](http://www.freetype.org/).
-   `WITH_HARFBUZZFONT` --- Build the @ref Text::HarfBuzzFont "HarfBuzzFont"
    plugin. Enables also building of the @ref Text::FreeTypeFont "FreeTypeFont"
    plugin. Depends on [HarfBuzz](http://www.freedesktop.org/wiki/Software/HarfBuzz).
-   `WITH_JPEGIMAGECONVERTER` --- Build the
    @ref Trade::JpegImageConverter "JpegImageConverter" plugin.
-   `WITH_JPEGIMPORTER` --- Build the @ref Trade::JpegImporter "JpegImporter"
    plugin. Depends on [libJPEG](http://libjpeg.sourceforge.net/).
-   `WITH_MINIEXRIMAGECONVERTER` --- Build the
    @ref Trade::MiniExrImageConverter "MiniExrImageConverter" plugin.
-   `WITH_OPENGEXIMPORTER` --- Build the @ref Trade::OpenGexImporter "OpenGexImporter"
    plugin. Enables also building of the @ref OpenDdl library.
-   `WITH_PNGIMAGECONVERTER` --- Build the
    @ref Trade::PngImageConverter "PngImageConverter" plugin. Depends on
    [libPNG](http://www.libpng.org/pub/png/libpng.html).
-   `WITH_PNGIMPORTER` --- Build the @ref Trade::PngImporter "PngImporter"
    plugin. Depends on [libPNG](http://www.libpng.org/pub/png/libpng.html).
-   `WITH_STANFORDIMPORTER` --- Build the
    @ref Trade::StanfordImporter "StanfordImporter" plugin.
-   `WITH_STBIMAGECONVERTER` --- Build the
    @ref Trade::StbImageConverter "StbImageConverter" plugin.
-   `WITH_STBIMAGEIMPORTER` --- Build the
    @ref Trade::StbImageImporter "StbImageImporter" plugin. Enabled
    automatically if `WITH_TINYGLTFIMPORTER` is enabled.
-   `WITH_STBTRUETYPEFONT` --- Build the
    @ref Text::StbTrueTypeFont "StbTrueTypeFont" plugin.
-   `WITH_STBVORBISAUDIOIMPORTER` --- Build the
    @ref Audio::StbVorbisImporter "StbVorbisAudioImporter" plugin.
-   `WITH_TINYGLTFIMPORTER` --- Build the
    @ref Trade::TinyGltfImporter "TinyGltfImporter" plugin.

Some plugins expose their internal state through separate libraries and you can
control their build separately:

-   `WITH_OPENDDL` --- Build the @ref OpenDdl library. Enabled automatically if
    `WITH_OPENGEXIMPORTER` is enabled.

Note that each plugin class / library namespace documentation contains more
detailed information about its dependencies, availability on particular
platforms and also a guide how to enable given plugin for building and how to
use it with CMake.

@section building-plugins-doc Building documentation

The documentation for plugins is built as part of of the main Magnum
documentation. Clone the projects next to each other and continue as described
in @ref building-doc.

@section building-plugins-ci Continuous Integration

@subsection building-plugins-ci-travis Travis

In `package/ci/` there is a `travis.yml` file with Linux GCC 4.7, macOS, Linux
desktop GLES2/GLES3, iOS GLES2/GLES3, Emscripten WebGL1/WebGL2, Android
GLES2/GLES3, AddressSanitizer and ThreadSanitizer configuration. Online at
https://travis-ci.org/mosra/magnum-plugins.

@subsection building-plugins-ci-appveyor AppVeyor

In `package/ci/` there is an `appveyor.yml` file with Windows desktop MSVC,
MinGW, Windows desktop GLES2/GLES3 and Windows RT GLES2/GLES3 configuration.
Online at https://ci.appveyor.com/project/mosra/magnum-plugins.

@subsection building-plugins-ci-coverage Codecov.io

Linux, Linux GLES, macOS and Windows MinGW builds contribute to a combined code
coverage report, available online at https://codecov.io/gh/mosra/magnum-plugins.
*/
}
