<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>${test_name}</title>
    <meta charset="utf-8" />
    <style>
      body {
          margin: 0px;
          padding: 0px;
          font-family: sans-serif;
          background-color: #111111;
          color: #aaaaaa;
      }

      h1 {
          text-align: center;
          font-size: 20px;
      }

      #listener {
          border-style: solid;
          border-color: #333333;
          border-width: 1px;
          padding: 1px;
          width: 640px;
          height: 480px;
          margin-left: auto;
          margin-right: auto;
          margin-top: 20px;
          margin-bottom: 20px;
          position: relative;
      }

      #module {
          width: 640px;
          height: 480px;
          z-index: 10;
      }

      #status {
          position: absolute;
          width: 640px;
          text-align: center;
          top: 200px;
          font-size: 30px;
          font-weight: bold;
          z-index: 9;
      }

      #statusDescription {
          position: absolute;
          width: 640px;
          text-align: center;
          top: 250px;
          font-size: 15px;
          z-index: 9;
      }

      #module.hidden {
          display: none;
      }

      #log {
          width: 640px;
          height: 480px;
          overflow-y: scroll;
          overflow-x: hidden;
          white-space: pre-wrap;
          z-index: 10;
          margin: 0;
      }
    </style>
  </head>
  <body>
    <h1>${test_name}</h1>
    <div id="listener">
      <canvas id="module" class="hidden"></canvas>
      <pre id="log"></pre>
      <div id="status">Initialization...</div>
      <div id="statusDescription"></div>
      <script>
        var Module = {
            preRun: [],
            postRun: [],

            arguments: [],

            printErr: function(message) {
                var log = document.getElementById('log');
                log.innerHTML += Array.prototype.slice.call(arguments).join(' ') + '\n';
            },

            print: function(message) {
                var log = document.getElementById('log');
                log.innerHTML += Array.prototype.slice.call(arguments).join(' ') + '\n';
            },

            canvas: document.getElementById('module'),

            setStatus: function(message) {
                var status = document.getElementById('status');
                if(status) status.innerHTML = message;
            },

            setStatusDescription: function(message) {
                var statusDescription = document.getElementById('statusDescription');
                if(statusDescription) statusDescription.innerHTML = message;
            },

            totalDependencies: 0,

            monitorRunDependencies: function(left) {
                this.totalDependencies = Math.max(this.totalDependencies, left);

                if(left) {
                    Module.setStatus('Downloading...');
                    Module.setStatusDescription((this.totalDependencies - left) + '/' + this.totalDependencies);
                } else {
                    Module.setStatus('');
                    Module.setStatusDescription('');
                    document.getElementById('log').style.display = 'block';
                }
            }
        };

        /* Parse arguments, e.g. /app/?foo=bar&fizz&buzz=3 goes to the app as
          ['--foo', 'bar', '--fizz', '--buzz', '3'] */
        var args = decodeURIComponent(window.location.search.substr(1)).trim().split('&');
        for(var i = 0; i != args.length; ++i) {
            var j = args[i].indexOf('=');
            /* Key + value */
            if(j != -1) {
                Module.arguments.push('--' + args[i].substring(0, j));
                Module.arguments.push(args[i].substring(j + 1));

            /* Just key */
            } else Module.arguments.push('--' + args[i]);
        }

        Module.setStatus('Downloading...');

        document.getElementById('log').style.display = 'none';

        if(Module.canvas) Module.canvas.addEventListener('contextmenu', function(event) {
            event.preventDefault();
        }, true);
      </script>
      <script async="async" src="${test_name}.js"></script>
    </div>
  </body>
</html>
<!-- kate: hl html; indent-width 2; -->
